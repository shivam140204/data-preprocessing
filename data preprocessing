{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2191975,"sourceType":"datasetVersion","datasetId":1316076},{"sourceId":2191981,"sourceType":"datasetVersion","datasetId":1316080},{"sourceId":2234433,"sourceType":"datasetVersion","datasetId":1342434}],"dockerImageVersionId":30096,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **Import Packages**","metadata":{}},{"cell_type":"code","source":"import pandas as pd","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Import Data**","metadata":{}},{"cell_type":"code","source":"data = pd.read_csv('../input/new-york-weather/nyc_weather_data.csv')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**HEAD - First 5 rows**</font>","metadata":{}},{"cell_type":"code","source":"data.head(5)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**TAIL - Last 5 rows**</font>","metadata":{}},{"cell_type":"code","source":"data.tail(5)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**HEAD(7) - First 7 rows**</font>","metadata":{}},{"cell_type":"code","source":"data.head(7)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**TAIL(3) - Last 3 rows**</font>","metadata":{}},{"cell_type":"code","source":"data.tail(3)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**SHAPE - rows x columns**</font>","metadata":{}},{"cell_type":"code","source":"data.shape\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**SHAPE[0] - rows**</font>","metadata":{}},{"cell_type":"code","source":"data.shape[0]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**SPLIT 0-2 -- Rows with indexes 0 to 2**</font>","metadata":{}},{"cell_type":"code","source":"data[0:2]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**SPLIT 3-7 -- Rows with indexes 3 to 7**</font>","metadata":{}},{"cell_type":"code","source":"data[3:7]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**SPLIT 5:0 -- Display rows with indexes 5 to 0 (reverse order)**</font>","metadata":{}},{"cell_type":"code","source":"data[5:0:-1]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**SPLIT 1:7:2 -- Display rows with odd indexes from 1 to 7**</font>","metadata":{}},{"cell_type":"code","source":"data[1:7:2]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Display names of the columns**</font>","metadata":{}},{"cell_type":"code","source":"data.head\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Display EST column only (first 5 rows)**</font>","metadata":{}},{"cell_type":"code","source":"data.EST.head(5)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Display Datatype of EST column**</font>","metadata":{}},{"cell_type":"code","source":"type(data.EST)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Display EST and Temperature columns (first 5 rows)**</font>","metadata":{}},{"cell_type":"code","source":"data[['EST', 'Temperature']].head(5)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Find the maximum Temperature**</font>","metadata":{}},{"cell_type":"code","source":"data['Temperature'].max()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Find the average(mean) value of WindSpeedMPH**</font>","metadata":{}},{"cell_type":"code","source":"data.WindSpeedMPH.mean()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**EST column where EVENTS == \"RAIN\"**</font>","metadata":{}},{"cell_type":"code","source":"data['EST'][data['Events'] == 'Rain']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Combining Columns**</font>","metadata":{}},{"cell_type":"markdown","source":"<font color='blue'>*Column 1* (Temperature)</font>","metadata":{}},{"cell_type":"code","source":"temp = data['Temperature']\ntemp.head(1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>*Column 2* (WindSpeedMPH)</font>","metadata":{}},{"cell_type":"code","source":"wind = data['WindSpeedMPH']\nwind.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>*Combining columns 1 & 2* (temp and wind)</font>","metadata":{}},{"cell_type":"code","source":"pd.concat([temp, wind], axis=1, keys=['Temperature', 'Windspeed']).head(0-2)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Renaming the column names _'DewPoint'_ to _'dewpoint'_ and _'CloudCover'_ to _'cloudcover'_**</font>","metadata":{}},{"cell_type":"code","source":"data1 = data.rename(columns={'DewPoint':'dewpoint','CloudCover':'cloudcover'})\ndata1.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Add addtional column \"HumDew\"**</font>","metadata":{}},{"cell_type":"markdown","source":"<font color='blue'>_Before addition of column HumDew_</font>","metadata":{}},{"cell_type":"code","source":"data.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>_Addition of HumDew column_ (HumDew = Humidity + DewPoint)</font>","metadata":{}},{"cell_type":"code","source":"data['HumDew'] = data['Humidity'] + data['DewPoint']\ndata.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>_After addition of column HumDew_</font>","metadata":{}},{"cell_type":"code","source":"data.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Series and DataFrame**</font>","metadata":{}},{"cell_type":"code","source":"print(type(data['Temperature']))\ndata['Temperature'].head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(type(data[['Temperature']]))\ndata['Temperature'].head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Find correlation** (corr)</font>","metadata":{}},{"cell_type":"code","source":"data.corr()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Display all the rows where \"Temperature\" > 40**</font>","metadata":{}},{"cell_type":"code","source":"data[data['Temperature'] > 40]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Display the day where temperature is the maximum temperature**</font>","metadata":{}},{"cell_type":"code","source":"data['EST'] [data['Temperature'] == data['Temperature'].max()]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Display the row where temperature is the maximum temperature**</font>","metadata":{}},{"cell_type":"code","source":"data [ data['Temperature'] == data['Temperature'].max()]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Display standard deviation of Temperature**</font>","metadata":{}},{"cell_type":"code","source":"data['Temperature'].std()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Find basic statistics like count, mean, std. dev, min, max etc (only numerical fields)** - describe</font>","metadata":{}},{"cell_type":"code","source":"data.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Find basic statistics like count, mean, std. dev, min, max etc (all fields)**</font>","metadata":{}},{"cell_type":"code","source":"data.describe(include='all')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Find basic statistics like count, mean, std. dev, min, max etc (only Temperature column)**</font>","metadata":{}},{"cell_type":"code","source":"data.Temperature.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Make \"EST\" field as index column (temporarily) - first 5 rows**</font>","metadata":{}},{"cell_type":"code","source":"data.set_index('EST').head(5)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>_Confirm that index is not changed in the dataframe df_</font>","metadata":{}},{"cell_type":"code","source":"data.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Make \"EST\" field as index column (temporarily) - first 5 rows**</font>","metadata":{}},{"cell_type":"code","source":"data.set_index('EST', inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='green'>Confirm that index is changed in the dataframe df</font>","metadata":{}},{"cell_type":"code","source":"data.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Display Index column elements**</font>","metadata":{}},{"cell_type":"code","source":"data.index","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Display row elements by Index name (one row)** - loc</font>","metadata":{}},{"cell_type":"code","source":"data.loc['1/2/2016']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Display row elements by Index name (multiple rows)**</font>","metadata":{}},{"cell_type":"code","source":"data.loc[['1/2/2016', '1/13/2016', '1/30/2016']]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Display row elements by Index _number_ (one row)** - iloc</font>","metadata":{}},{"cell_type":"code","source":"data.iloc[2]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Display row elements by Index _number_ (multiple row)**</font>","metadata":{}},{"cell_type":"code","source":"data.loc[[2,6,10]]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Reset index to default**</font>","metadata":{}},{"cell_type":"code","source":"data.reset_index(inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>_Confirm index is reset to default_</font>","metadata":{}},{"cell_type":"code","source":"data.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Replace the column value with different value (temporary) - Replace \"Rain\" with \"Rainy\" in \"Events\" column**</font>","metadata":{}},{"cell_type":"code","source":"data['Events'].replace('Rain', 'Rainy').head(10)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>_Confirm index changes are not permanent(temporary)_</font>","metadata":{}},{"cell_type":"markdown","source":"<font color='blue'>**Replace the column value with different value (permanent) - Replace \"Rain\" with \"Rainy\" in \"Events\" column**</font>","metadata":{}},{"cell_type":"code","source":"data.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['Events'].replace('Rain', 'Rainy', inplace = True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.Events.head(10)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Find the count of each Event**</font>","metadata":{}},{"cell_type":"code","source":"data.Events.value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Find the count of each Event including Null values**</font>","metadata":{}},{"cell_type":"code","source":"data['Events'].value_counts(dropna=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Find the unique values in the \"Events\" and \"VisibilityMiles\" column**</font>","metadata":{}},{"cell_type":"code","source":"data['Events'].unique()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['VisibilityMiles'].unique()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Slicing rows and columns ('EST' and 'DewPoint')**</font>","metadata":{}},{"cell_type":"code","source":"data.loc[1:5,'EST':'DewPoint']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Combining Filters**</font>","metadata":{}},{"cell_type":"markdown","source":"<font color='blue'>_Temperature > 36 and < 40_</font>","metadata":{}},{"cell_type":"code","source":"data[(data['Temperature']> 36) & (data['Temperature'] < 40)]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>_Temperature > 45 and Events =='Rain'_</font>","metadata":{}},{"cell_type":"code","source":"data[(data['Temperature']> 45) & (data['Events'] == 'Rain')]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Dealing with Null Values","metadata":{}},{"cell_type":"markdown","source":"<font color='blue'>**Find count of null values for each field**</font>","metadata":{}},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Find the rows which have null values for the field WindSpeedMPH**</font>","metadata":{}},{"cell_type":"code","source":"data[data['WindSpeedMPH'].isnull()]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Find the rows which have null values for the field Events**</font>","metadata":{}},{"cell_type":"code","source":"data[data['Events'].isnull()]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**ROWS with NULL value in WindSpeedMPH and Events column**</font>","metadata":{}},{"cell_type":"code","source":"data[data.WindSpeedMPH.isnull() & data.Events.isnull()]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Fill the null values with zero**</font>","metadata":{}},{"cell_type":"code","source":"data.fillna(0)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**DROP the ROWS IF ANY column has NULL value**</font>","metadata":{}},{"cell_type":"code","source":"data1 = data.dropna()\ndata1","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.shape","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>_Confirm that null values are removed_</font>","metadata":{}},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Import pandas and numpy package**</font>","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Read weather.csv into df**</font>","metadata":{}},{"cell_type":"code","source":"data = pd.read_csv(\"/kaggle/input/weather-data/weather.csv\")\ndata","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Create Pivot with city as _index_ and date as _column_**</font>","metadata":{}},{"cell_type":"code","source":"data.pivot(index='city',columns='date')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Create Pivot with city as _index_ and date as _column_ and temperature as _values_**</font>","metadata":{}},{"cell_type":"code","source":"data.pivot(index='city',columns='date',values=\"temperature\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Create Pivot with city as _index_ and date as _column_ and humidity as _values_**</font>","metadata":{}},{"cell_type":"code","source":"data.pivot(index='city',columns='date',values=\"humidity\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Create Pivot with date as _index_ and city as _column_**</font>","metadata":{}},{"cell_type":"code","source":"data.pivot(index='date',columns='city')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Create Pivot with humidity as _index_ and city as _column_**</font>","metadata":{}},{"cell_type":"code","source":"data.pivot(index='humidity',columns='city')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Create Pivot with temperature as _index_ and city as _column_**</font>","metadata":{}},{"cell_type":"code","source":"data.pivot(index='temperature',columns='city')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.pivot_table(index=\"city\",columns=\"date\", margins=True,aggfunc=np.sum)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = pd.read_csv('../input/new-york-weather/nyc_weather_data.csv')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Lambda function**</font>","metadata":{}},{"cell_type":"code","source":"data.Temperature.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.Temperature.apply(lambda x : x/2).head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Primary and Secondary Indexes**</font>","metadata":{}},{"cell_type":"code","source":"data.index","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data1 = data.set_index([\"Events\", \"VisibilityMiles\"])\ndata1","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Melting DataFrames**</font>","metadata":{}},{"cell_type":"code","source":"pd.melt(data, id_vars=\"Temperature\", value_vars=[\"DewPoint\", \"Humidity\"]).head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.Temperature.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.DewPoint.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.Humidity.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<font color='blue'>**Groupby function**</font>","metadata":{}},{"cell_type":"code","source":"data.groupby('Events').count()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.groupby('Events').sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.groupby('Events').sum()[['Temperature', 'DewPoint']]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.groupby('Events').sum()[['Temperature', 'DewPoint']].max()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<h1 style=\"color:blue\" align=\"center\">////// Crosstab Tutorial ////// </h1>","metadata":{}},{"cell_type":"code","source":"pd.crosstab(data.Events, data.Temperature)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.crosstab(data.CloudCover, data.Events)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.crosstab(data.Events, data.Temperature, margins=True)","metadata":{"scrolled":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.crosstab(data.Events, [data.Temperature,data.VisibilityMiles], margins=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.crosstab(data.Events, data.Temperature, normalize='index')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.crosstab(data.Events, [data.Temperature,data.VisibilityMiles], margins=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}